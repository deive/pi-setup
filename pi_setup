#!/usr/bin/env bash

# TODO: Use proper error handling: http://mywiki.wooledge.org/BashFAQ/105
set -e

# Ask if the user wants to scan, if so output the SSIDs found
wifi_scan() {
	read -r -p "Scan for nearby WiFi SSIDs? [y/N] " response
	if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
		nmcli dev wifi | sed '1d' | tr -s ' ' | cut -d' ' -f3 | sed -e 's/^/ - /'
	fi
}

# Interactive input for WiFi config.
config_wifi_input() {
	echo "- WiFi"
	read -r -p "Connect Pi to WiFi? [y/N] " response
	if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
		enable_wifi=true
		echo "(see https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes)"
		read -p "2 letter country code [GB]: " wifi_country
		wifi_country=${wifi_country:-GB}
		wifi_scan
		while [ -z ${wifi_ssid} ]; do
			read -p "SSID for Pi to connect to: " wifi_ssid
		done
		while [ -z ${wifi_psk} ]; do
			read -s -p "Passcode: " wifi_psk
			echo
		done
	else
		enable_wifi=false
	fi
}

# Interactive input for ethernet fixed IP config.
config_ethernet_input() {
	echo "- Ethernet"
	read -r -p "Fix the ethernet IP address? [y/N] " response
	if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
		ethernet_fixed_ip=true
		read -p "IP address [3.141.59.1]: " ethernet_fixed_ip_address
		ethernet_fixed_ip_address=${ethernet_fixed_ip_address:-3.141.59.1}
		read -p "Routers (blank for none): " ethernet_fixed_ip_routers
		read -p "Domain Name Servers (blank for none): " ethernet_fixed_ip_domain_name_servers
	else
		ethernet_fixed_ip=false
	fi
}

# Interactive input for bridging config.
config_bridging_input() {
	if [ "$ethernet_fixed_ip" = true ]; then
		echo "- Bridging"
		read -r -p "Enable bridging interal ethernet clients to public WiFi? [y/N] " response
		if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
			enable_bridging=true

			# TODO: Check for blank ethernet_fixed_ip_domain_name_servers, as this is required here.

			read -p "IP Netmask [255.255.255.0]: " bridging_fixed_ip_netmask
			bridging_fixed_ip_netmask=${bridging_fixed_ip_netmask:-255.255.255.0}
			read -p "DHCP Range [3.141.59.10,3.141.59.254,12h]: " bridging_dhcp_range
			bridging_dhcp_range=${bridging_dhcp_range:-3.141.59.10,3.141.59.254,12h}
		else
			enable_bridging=false
		fi
	fi
}

# Interactive input for SSH config.
config_ssh_input() {
	echo "- SSH"
	read -r -p "Start SSH on Pi? [y/N] " response
	if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
		enable_ssh=true
		read -r -p "Create an SSH key? [y/N] " response
		if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
			create_ssh_key=true
			read -r -p "Disable password for SSH? [y/N] " response
			if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
				disable_ssh_password=true
			else
				disable_ssh_password=false
			fi
		else
			create_ssh_key=false
		fi
	else
		enable_ssh=false
	fi
}

# Interactive input if there is no config file.
config_input() {
	read -p "Hostname for your Pi [raspberrypi]: " pi_hostname
	pi_hostname=${pi_hostname:-raspberrypi}
	while [ -z ${pi_user_password} ]; do
		read -s -p "Pi user password: " pi_user_password
		echo
	done
	
	config_ssh_input
	config_wifi_input
	config_ethernet_input
	config_bridging_input
}

# Read in config, or ask for input.
config() {
	if [ -z "${args[0]}" ] && [ -f "$0.config" ]; then
		. "$0.config"
	elif [ -f "${args[0]}.config" ]; then
		. "${args[0]}.config"
	elif [ "$1" = true ]; then
		config_input
	else
		echo "While running as user we can generate a useable SSH key, if required. (These values will need to be re-entered as root)"
		read -r -p "Generate a new SSH key? [Y/n] " response
		response=${response:-y}
		if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
			enable_ssh=true
			create_ssh_key=true
			read -p "Hostname for your Pi [raspberrypi]: " pi_hostname
			pi_hostname=${pi_hostname:-raspberrypi}
		else
			enable_ssh=false
			create_ssh_key=false
		fi
	fi
}

# Finds the mount points for the boot and rootfs partitions.
find_sd_card() {
	sd_dir_boot=`mount -l | grep -F [boot] | awk '{if ($3) print $3}'`
	sd_dir_root=`mount -l | grep -F [rootfs] | awk '{if ($3) print $3}'`
	
	if [ -z "$sd_dir_boot" ] || [ -z "$sd_dir_root" ]; then
		echo "Can't find mounted SD card, exiting"
		exit 1
	else
		echo "Found SD partitions mounted at:"
		echo
		echo $sd_dir_boot
		echo $sd_dir_root
		echo
		read -s -p "Press enter to continue if this is correct, ctrl-c to stop."
		echo
		echo
	fi
}

# Updates boot partition.
update_boot() {
	if [ "$enable_ssh" = true ]; then
		echo "Modifying " $sd_dir_boot"/..."
		echo "- creating ssh"
		touch $sd_dir_boot/ssh
	fi

	if [ "$enable_wifi" = true ]; then
		echo "- creating wpa_supplicant.conf"
		echo ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev >> $sd_dir_boot/wpa_supplicant.conf
		echo update_config=1 >> $sd_dir_boot/wpa_supplicant.conf
		echo "country=$wifi_country" >> $sd_dir_boot/wpa_supplicant.conf
		echo >> $sd_dir_boot/wpa_supplicant.conf
		wpa_passphrase "$wifi_ssid" "$wifi_psk" | sed '/^\t#/d' >> $sd_dir_boot/wpa_supplicant.conf
	fi
}

# Setup fixed ethernet IP.
update_rootfs_fixed_ethernet() {
	if [ "$ethernet_fixed_ip" = true ]; then
		echo "- updating etc/dhcpcd.conf"
		echo "interface eth0" >> $sd_dir_root/etc/dhcpcd.conf
		echo "static ip_address=$ethernet_fixed_ip_address" >> $sd_dir_root/etc/dhcpcd.conf
		if [ -n "$ethernet_fixed_ip_routers" ]; then
			echo "static routers=$ethernet_fixed_ip_routers" >> $sd_dir_root/etc/dhcpcd.conf
		fi
		if [ -n "$ethernet_fixed_ip_domain_name_servers" ]; then
			echo "static domain_name_servers=$ethernet_fixed_ip_domain_name_servers" >> $sd_dir_root/etc/dhcpcd.conf
		fi
	fi
}

# Create a first boot service that installs dnsmasq.
update_rootfs_bridging_first_boot() {
	echo "- creating /etc/pi_setup.first_boot"
	cat <<EOF >$sd_dir_root/etc/pi_setup.first_boot
echo "Installing dnsmasq for WiFi bridging"
apt install -y dnsmasq
EOF
	chmod +x $sd_dir_root/etc/pi_setup.first_boot

	echo "- adding pi_setup.first_boot run command to history - press up in terminal to run."
	cat <<EOF >$sd_dir_root/home/pi/.bash_history
sudo /etc/pi_setup.first_boot
EOF
}

# Updates config files for dnsmasq to bridge internal ethernet to external WiFi.
update_rootfs_bridging() {
	if [ "$enable_bridging" = true ]; then
		echo "- updating etc/iptables"
		mkdir -p $sd_dir_root/etc/iptables

		echo "- updating etc/iptables/rules.v4"
		cat <<'EOF' >$sd_dir_root/etc/iptables/rules.v4
*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
-A POSTROUTING -o wlan0 -j MASQUERADE
COMMIT
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A FORWARD -i wlan0 -o eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -i eth0 -o wlan0 -j ACCEPT
COMMIT
EOF

		echo "- updating etc/network/if-up.d/iptables"
		cat <<'EOF' >$sd_dir_root/etc/network/if-up.d/iptables
#!/bin/sh
iptables-restore < /etc/iptables/rules.v4
EOF
		chmod +x $sd_dir_root/etc/network/if-up.d/iptables

		echo "- updating etc/sysctl.conf"
		sed -i'' s/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/ $sd_dir_root/etc/sysctl.conf

		echo "- updating etc/network/interfaces.d/eth0"
		cat <<EOF >$sd_dir_root/etc/network/interfaces.d/eth0
auto eth0
allow-hotplug eth0
iface eth0 inet static
  address $ethernet_fixed_ip_address
  netmask $bridging_fixed_ip_netmask
  gateway $ethernet_fixed_ip_address
EOF

		echo "- updating etc/dnsmasq.d/bridge.conf"
		mkdir -p $sd_dir_root/etc/dnsmasq.d
		cat <<EOF >$sd_dir_root/etc/dnsmasq.d/bridge.conf
interface=eth0
bind-interfaces
server=$ethernet_fixed_ip_domain_name_servers
domain-needed
bogus-priv
dhcp-range=$bridging_dhcp_range
EOF

		update_rootfs_bridging_first_boot
	fi
}

# Copies previously created public SSH key from users .ssh directory as the single authorized key.
# Disables password auth over SSH.
update_rootfs_ssh_key() {
	if [ "$enable_ssh" = true ] && [ "$create_ssh_key" = true ]; then
		echo "- copying public half of SSH key to /home/pi/.ssh/"
		mkdir -p -m 700 $sd_dir_root/home/pi/.ssh/
		cp ${args[1]}/.ssh/$pi_hostname.pub $sd_dir_root/home/pi/.ssh/authorized_keys
		chown -R 1000:1000 $sd_dir_root/home/pi/.ssh/

		if [ "$disable_ssh_password" = true ]; then
			echo "- updating etc/ssh/sshd_config"
			sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/g' $sd_dir_root/etc/ssh/sshd_config
		fi
	fi
}

# Updates rootfs partition.
update_rootfs() {
	echo "Modifying " $sd_dir_root"/..."
	echo "- updating etc/hostname"
	cat <<EOF >$sd_dir_root/etc/hostname
$pi_hostname
EOF
	echo "- updating etc/hosts"
	sed -i 's/127.0.1.1\t\t[a-zA-Z\-]*$/127.0.1.1\t\t'$pi_hostname'/g' $sd_dir_root/etc/hosts

	echo "- updating etc/shadow"
	pi_user_password=`openssl passwd -6 -salt $(head -c18 /dev/urandom | openssl base64) "$pi_user_password"`
	pi_old_password=`cat $sd_dir_root/etc/shadow | awk -F: '{ if ($1 == "pi") print $2 }'`
	sed -i 's#'$pi_old_password'#'$pi_user_password'#g' $sd_dir_root/etc/shadow
	
	update_rootfs_ssh_key
	update_rootfs_fixed_ethernet
	update_rootfs_bridging
}

# Main method run when the user is root.
run() {
	echo
	update_boot
	update_rootfs
	echo "Done!"
}

# Re-runs this script as root.
run_as_root() {
	echo re-running as root: "$0" "${args[0]}" "$HOME"
	echo
	exec sudo bash "$0" "${args[0]}" "$HOME"
}

# This needs to be owned by the user, so run before root.
generate_ssh_key() {
	if [ "$enable_ssh" = true ] && [ "$create_ssh_key" = true ]; then
		echo "- creating key in $HOME/.ssh/ called $pi_hostname"
		mkdir -p $HOME/.ssh
		ssh-keygen -t ed25519 -f $HOME/.ssh/$pi_hostname || true
		if [ ! -f "$HOME/.ssh/$pi_hostname" ]; then
			echo "Required SSH file not created, exiting"
			exit 1
		fi
		echo
	fi
}

args=("$@")

# Check for sudo and elevate if required.
if [ "$UID" != 0 ]; then
	config false
	generate_ssh_key
	run_as_root 
else
	config true
	find_sd_card
	if [ "$enable_ssh" = true ] && [ "$create_ssh_key" = true ]; then
		echo "If you ran this directly as root then a new SSH will not have been generated."
		read -s -p "Press enter to continue if you ran under your user, ctrl-c to stop and then re-run as non-root."
	fi
	run
fi
